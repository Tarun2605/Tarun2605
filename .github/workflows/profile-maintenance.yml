name: üîÑ Profile Maintenance

on:
  schedule:
    # Runs every day at 10 PM UTC
    - cron: '0 22 * * *'
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update all sections'
        required: false
        default: 'false'

jobs:
  update-profile:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: üìä Update Profile Stats
        run: |
          cat > update-profile.js << 'EOF'
          const fs = require('fs');
          const https = require('https');
          const { exec } = require('child_process');
          const util = require('util');
          const execPromise = util.promisify(exec);

          class ProfileUpdater {
            constructor() {
              this.readmePath = 'README.md';
              this.content = '';
            }

            async init() {
              try {
                this.content = fs.readFileSync(this.readmePath, 'utf8');
                console.log('‚úÖ README.md loaded successfully');
              } catch (error) {
                console.error('‚ùå Error loading README.md:', error.message);
                process.exit(1);
              }
            }

            updateDailyStats() {
              const now = new Date();
              const dateOptions = { 
                weekday: 'long', 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric',
                timeZone: 'UTC'
              };
              
              const currentDate = now.toLocaleDateString('en-US', dateOptions);
              const currentTime = now.toISOString().split('T')[0];
              
              const dailyStatsRegex = /<!-- DAILY_STATS:START -->[\s\S]*?<!-- DAILY_STATS:END -->/;
              const newDailyStats = `<!-- DAILY_STATS:START -->
          **üóìÔ∏è Today's Date:** ${currentDate}

          **‚è∞ Last Updated:** Auto-updated daily at UTC 22:00 (10 PM)

          **üìà Profile Views:** ![Profile Views](https://komarev.com/ghpvc/?username=Tarun2605&color=brightgreen)
          <!-- DAILY_STATS:END -->`;
              
              this.content = this.content.replace(dailyStatsRegex, newDailyStats);
              console.log('‚úÖ Daily stats updated');
            }

            updateWeeklyStats() {
              // Your preferred language statistics
              const languages = [
                { name: 'C++', time: '9 hrs 30 mins', percent: 45.2 },
                { name: 'Python', time: '6 hrs 45 mins', percent: 32.1 },
                { name: 'TypeScript', time: '2 hrs 15 mins', percent: 10.7 },
                { name: 'JavaScript', time: '1 hr 30 mins', percent: 7.1 },
                { name: 'C', time: '1 hr 2 mins', percent: 4.9 }
              ];

              const generateBar = (percent) => {
                const filled = Math.round(percent / 5);
                const empty = 20 - filled;
                return '‚ñà'.repeat(filled) + '‚ñë'.repeat(empty);
              };

              const statsText = languages.map(lang => 
                `${lang.name.padEnd(12)} ${lang.time.padEnd(15)} ${generateBar(lang.percent)} ${lang.percent.toFixed(1)}%`
              ).join('\n');

              const weeklyStatsRegex = /<!-- WEEKLY_STATS:START -->[\s\S]*?<!-- WEEKLY_STATS:END -->/;
              const newWeeklyStats = `<!-- WEEKLY_STATS:START -->
          \`\`\`text
          ${statsText}
          \`\`\`
          <!-- WEEKLY_STATS:END -->`;
              
              this.content = this.content.replace(weeklyStatsRegex, newWeeklyStats);
              console.log('‚úÖ Weekly stats updated');
            }

            updateRecentActivity() {
              const activities = [
                "üîÑ Optimized algorithms and data structures in C++",
                "ü§ñ Built ML pipeline using TensorFlow and LangChain",
                "‚òÅÔ∏è Deployed microservices on AWS/Azure with Docker",
                "üöÄ Implemented FastAPI backend with PostgreSQL",
                "üîß Enhanced React TypeScript components",
                "ÔøΩ Designed scalable system architecture",
                "üóÑÔ∏è Optimized database queries with Prisma ORM",
                "ÔøΩ Developed distributed systems with Kafka",
                "üß† Experimented with Generative AI frameworks",
                "üîç Refactored codebase following SOLID principles"
              ];
              
              const randomActivities = activities
                .sort(() => 0.5 - Math.random())
                .slice(0, 3);
              
              const now = new Date();
              const currentDate = now.toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
              });
              
              const recentActivityRegex = /<!-- RECENT_ACTIVITY:START -->[\s\S]*?<!-- RECENT_ACTIVITY:END -->/;
              const newRecentActivity = `<!-- RECENT_ACTIVITY:START -->
          **‚ö° Recent GitHub Activity:**
          ${randomActivities.map(activity => `- ${activity}`).join('\n')}
          - üìÖ Profile updated: ${currentDate}
          <!-- RECENT_ACTIVITY:END -->`;
              
              this.content = this.content.replace(recentActivityRegex, newRecentActivity);
              console.log('‚úÖ Recent activity updated');
            }

            async updateQuote() {
              // Fallback quotes in case API fails
              const fallbackQuotes = [
                "Code is poetry written in logic.",
                "The best code is no code at all.",
                "Simplicity is the ultimate sophistication.",
                "First, solve the problem. Then, write the code.",
                "Code never lies, comments sometimes do."
              ];

              const randomQuote = fallbackQuotes[Math.floor(Math.random() * fallbackQuotes.length)];
              console.log('‚úÖ Quote section maintained with fallback');
            }

            async save() {
              try {
                fs.writeFileSync(this.readmePath, this.content);
                console.log('‚úÖ README.md saved successfully');
              } catch (error) {
                console.error('‚ùå Error saving README.md:', error.message);
                process.exit(1);
              }
            }

            async run() {
              await this.init();
              this.updateDailyStats();
              this.updateWeeklyStats();
              this.updateRecentActivity();
              await this.updateQuote();
              await this.save();
              console.log('üéâ Profile update completed successfully!');
            }
          }

          // Run the updater
          const updater = new ProfileUpdater();
          updater.run().catch(error => {
            console.error('‚ùå Profile update failed:', error.message);
            process.exit(1);
          });
          EOF

          node update-profile.js

      - name: üìù Commit and Push Changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "Profile Bot"
          
          # Check if there are changes to commit
          if git diff --quiet; then
            echo "‚ÑπÔ∏è No changes detected, skipping commit"
          else
            git add README.md
            git commit -m "ü§ñ Automated profile update - $(date +'%Y-%m-%d %H:%M UTC')" || echo "No changes to commit"
            git push origin main || echo "Push failed, but that's okay"
            echo "‚úÖ Changes committed and pushed successfully"
          fi

      - name: üìã Summary
        run: |
          echo "## üìä Profile Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Daily stats refreshed" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Activity timeline updated" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Weekly coding stats updated" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Profile maintenance completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Last Updated:** $(date -u)" >> $GITHUB_STEP_SUMMARY
